diff --git a/PATCHES b/PATCHES
index e69de29b..a4a593a0 100644
--- a/PATCHES
+++ b/PATCHES
@@ -0,0 +1,2 @@
+patch-2.0.3.bk.gmail-extensions
+patch-2.0.3.bk.gmail-extensions
diff --git a/doc/manual.xml.head b/doc/manual.xml.head
index 36543eb5..f7bff066 100644
--- a/doc/manual.xml.head
+++ b/doc/manual.xml.head
@@ -5835,6 +5835,7 @@ e.g. replies to your messages: ~&lt;(~P)</entry></row>
 <row><entry>~&gt;(<emphasis>PATTERN</emphasis>)</entry><entry>messages
 having an immediate child matching <emphasis>PATTERN</emphasis>,
 e.g. messages you replied to: ~&gt;(~P)</entry></row>
+<row><entry>=/ <emphasis>STRING</emphasis></entry><entry>IMAP custom server-side search for <emphasis>STRING</emphasis>. Currently only defined for Gmail.</entry></row>
 </tbody>
 </tgroup>
 </table>
diff --git a/imap/command.c b/imap/command.c
index 5ca04bf0..cd09303f 100644
--- a/imap/command.c
+++ b/imap/command.c
@@ -76,6 +76,7 @@ static const char * const Capabilities[] = {
   "QRESYNC",
   "LIST-EXTENDED",
   "COMPRESS=DEFLATE",
+  "X-GM-EXT-1",
 
   NULL
 };
diff --git a/imap/imap.c b/imap/imap.c
index b13dd54d..56b0db0f 100644
--- a/imap/imap.c
+++ b/imap/imap.c
@@ -2135,6 +2135,9 @@ static int do_search (const pattern_t* search, int allpats)
         if (pat->stringmatch)
           rc++;
         break;
+      case MUTT_SERVERSEARCH:
+        rc++;
+        break;
       default:
         if (pat->child && do_search (pat->child, 1))
           rc++;
@@ -2150,7 +2153,7 @@ static int do_search (const pattern_t* search, int allpats)
 /* convert mutt pattern_t to IMAP SEARCH command containing only elements
  * that require full-text search (mutt already has what it needs for most
  * match types, and does a better job (eg server doesn't support regexps). */
-static int imap_compile_search (const pattern_t* pat, BUFFER* buf)
+static int imap_compile_search (CONTEXT* ctx, const pattern_t* pat, BUFFER* buf)
 {
   if (! do_search (pat, 0))
     return 0;
@@ -2176,7 +2179,7 @@ static int imap_compile_search (const pattern_t* pat, BUFFER* buf)
             mutt_buffer_addstr (buf, "OR ");
           clauses--;
 
-          if (imap_compile_search (clause, buf) < 0)
+          if (imap_compile_search (ctx, clause, buf) < 0)
             return -1;
 
           if (clauses)
@@ -2227,6 +2230,19 @@ static int imap_compile_search (const pattern_t* pat, BUFFER* buf)
         imap_quote_string (term, sizeof (term), pat->p.str);
         mutt_buffer_addstr (buf, term);
         break;
+      case MUTT_SERVERSEARCH:
+        {
+          IMAP_DATA* idata = (IMAP_DATA*)ctx->data;
+          if (!mutt_bit_isset (idata->capabilities, X_GM_EXT_1))
+          {
+            mutt_error(_("Server-side custom search not supported: %s"), pat->p.str);
+            return -1;
+          }
+        }
+        mutt_buffer_addstr (buf, "X-GM-RAW ");
+        imap_quote_string (term, sizeof (term), pat->p.str);
+        mutt_buffer_addstr (buf, term);
+        break;
     }
   }
 
@@ -2247,7 +2263,7 @@ int imap_search (CONTEXT* ctx, const pattern_t* pat)
 
   mutt_buffer_init (&buf);
   mutt_buffer_addstr (&buf, "UID SEARCH ");
-  if (imap_compile_search (pat, &buf) < 0)
+  if (imap_compile_search (ctx, pat, &buf) < 0)
   {
     FREE (&buf.data);
     return -1;
diff --git a/imap/imap_private.h b/imap/imap_private.h
index 42078349..7b97b654 100644
--- a/imap/imap_private.h
+++ b/imap/imap_private.h
@@ -123,6 +123,7 @@ enum
   QRESYNC,                      /* RFC 7162 */
   LIST_EXTENDED,                /* RFC 5258: IMAP4 - LIST Command Extensions */
   COMPRESS_DEFLATE,             /* RFC 4978: COMPRESS=DEFLATE */
+  X_GM_EXT_1,                   /* Gmail IMAP Extensions */
 
   CAPMAX
 };
diff --git a/imap/message.c b/imap/message.c
index ed073e96..2d68cb7a 100644
--- a/imap/message.c
+++ b/imap/message.c
@@ -788,8 +788,10 @@ static int read_headers_fetch_new (IMAP_DATA *idata, unsigned int msn_begin,
          imap_fetch_msn_seqset (b, idata, evalhc, msn_begin, msn_end,
                                 &fetch_msn_end))
   {
-    safe_asprintf (&cmd, "FETCH %s (UID FLAGS INTERNALDATE RFC822.SIZE %s)",
-                   mutt_b2s (b), hdrreq);
+    safe_asprintf (&cmd, "FETCH %s (%sUID FLAGS INTERNALDATE RFC822.SIZE X-GM-LABELS %s)",
+                   mutt_b2s (b), 
+                   mutt_bit_isset (idata->capabilities, X_GM_EXT_1) ? "X-GM-MSGID " : "",
+                   hdrreq);
     imap_cmd_start (idata, cmd);
     FREE (&cmd);
 
@@ -873,6 +875,7 @@ static int read_headers_fetch_new (IMAP_DATA *idata, unsigned int msn_begin,
                                                        0, 0);
         /* content built as a side-effect of mutt_read_rfc822_header */
         ctx->hdrs[idx]->content->length = h.content_length;
+        ctx->hdrs[idx]->env->x_label = h.data->labels;
         ctx->size += h.content_length;
 
 #if USE_HCACHE
@@ -1000,6 +1003,13 @@ int imap_fetch_message (CONTEXT *ctx, MESSAGE *msg, int msgno)
     }
   }
 
+  if (mutt_bit_isset (idata->capabilities, X_GM_EXT_1))
+  {
+    fprintf (msg->fp, "X-Gm-Msgid:%llu\n", HEADER_DATA(h)->msgid);
+    fprintf (msg->fp, "X-Gm-Permalink: https://mail.google.com/mail/#all/%llx\n", HEADER_DATA(h)->msgid);
+  }
+
+
   /* mark this header as currently inactive so the command handler won't
    * also try to update it. HACK until all this code can be moved into the
    * command handler */
@@ -1769,11 +1779,57 @@ static int msg_parse_fetch (IMAP_HEADER *h, char *s)
   {
     SKIPWS (s);
 
+    if (ascii_strncasecmp ("X-GM-LABELS", s, 11) == 0)
+    {
+        s += 11;
+        SKIPWS (s);
+        ptmp = tmp;
+        s++; /* skip ( */
+        while (*s && *s != ')')
+        {
+            if (ptmp-tmp == sizeof(tmp)/sizeof(char))
+              s++;
+            else if (ascii_strncasecmp ("\"\\\\Important\"", s, 13) == 0)
+            {
+              s += 13;
+              SKIPWS (s);
+            }
+            else if (ascii_strncasecmp ("\"\\\\Starred\"", s, 11) == 0)
+            {
+              s += 11;
+              SKIPWS (s);
+            }
+            else if (ascii_strncasecmp ("\"\\\\", s, 3) == 0)
+              s += 3;
+            else if (ascii_strncasecmp ("\"", s, 1) == 0)
+              s++;
+            else
+              *ptmp++ = *s++;
+
+            if (*s == ')' && *(ptmp-1) == ' ')
+              ptmp--;
+        }
+        if (*s != ')')
+            return -1;
+        s++; /* skip ) */
+        *ptmp = 0;
+        h->data->labels = safe_strdup(tmp);
+        SKIPWS (s);
+    }
+
     if (ascii_strncasecmp ("FLAGS", s, 5) == 0)
     {
       if ((s = msg_parse_flags (h, s)) == NULL)
         return -1;
     }
+    else if (ascii_strncasecmp ("X-GM-MSGID", s, 10) == 0)
+    {
+      s += 10;
+      SKIPWS (s);
+      h->data->msgid = strtoull (s, NULL, 10);
+
+      s = imap_next_word (s);
+    }
     else if (ascii_strncasecmp ("UID", s, 3) == 0)
     {
       s += 3;
diff --git a/imap/message.h b/imap/message.h
index 11b549fd..6d243066 100644
--- a/imap/message.h
+++ b/imap/message.h
@@ -37,6 +37,8 @@ typedef struct imap_header_data
 
   unsigned int uid;	/* 32-bit Message UID */
   unsigned int msn;     /* Message Sequence Number */
+  unsigned long long msgid;
+  char *labels;
   LIST *keywords;
 } IMAP_HEADER_DATA;
 
diff --git a/mutt.h b/mutt.h
index 8f45e67f..9b2997eb 100644
--- a/mutt.h
+++ b/mutt.h
@@ -275,6 +275,7 @@ enum
   MUTT_XLABEL,
   MUTT_MIMEATTACH,
   MUTT_MIMETYPE,
+  MUTT_SERVERSEARCH,
 
   /* Options for Mailcap lookup */
   MUTT_EDIT,
diff --git a/pattern.c b/pattern.c
index 6957a7e8..c6a774a7 100644
--- a/pattern.c
+++ b/pattern.c
@@ -279,6 +279,11 @@ Flags[] =
        Pattern Completion Menu description for ~$
     */
     N_("unreferenced messages") },
+  { '/', MUTT_SERVERSEARCH, 0, EAT_REGEXP,
+    /* L10N:
+       Pattern Completion Menu description for =/
+     */
+    N_("gmail server-side search") },
   { 0, 0, 0, 0, NULL }
 };
 
@@ -1648,6 +1653,22 @@ mutt_pattern_exec (struct pattern_t *pat, pattern_exec_flag flags, CONTEXT *ctx,
 	return (h->matched);
 #endif
       return (pat->not ^ msg_search (ctx, pat, h->msgno));
+    case MUTT_SERVERSEARCH:
+#ifdef USE_IMAP
+      if (!ctx)
+	return 0;
+      if (ctx->magic == MUTT_IMAP)
+      {
+	if (pat->stringmatch)
+	  return (h->matched);
+	return 0;
+      }
+      mutt_error (_("error: server custom search only supported with IMAP."));
+      return 0;
+#else
+      mutt_error (_("error: server custom search only supported with IMAP."));
+      return (-1);
+#endif
     case MUTT_SENDER:
       return (pat->not ^ match_adrlist (pat, flags & MUTT_MATCH_FULL_ADDRESS, 1,
                                         h->env->sender));
